{
    "activities": [
        {
            "title": "Week 3 Practice Problems",
            "questions": [
                {
                    "title": "Question 1",
                    "question": "<p>What is wrong with the following instruction?</p><code>lw $s0, $t0, 20($t1)</code>",
                    "answer": "The lw instruction does not take 3 registers. Its format should be lw $s0, 20($t0)."
                },
                {
                    "title": "Question 2",
                    "question": "<p>How about this one?</p><code>lw $k1, 15($s0)</code>",
                    "answer": "The k registers are reserved for the OS kernel and should not be tampered with."
                },
                {
                    "title": "Question 3",
                    "question": "Consider a 32 bit binary number stored in register $s0. Isolate bits 16 through 25 (i.e., keep bits 16 through 25 unchanged, but turn all other bits into zero) in four or less MIPS commands. Please store the result in $s0. Be sure that the bits end up in their original location.",
                    "answer": "<p>There are multiple possible answers, but here is one of them:</p><code>addi $s1, $s1, 1023<br>srl $s1, $s1, 16<br>and $s0, $s1, $s0<br>sll $s1, $s1, 16<br></code><p>Here's a different approach:</p><code>srl $s1, $s1, 16<br>andi $s0, $s0, 1023<br>sll $s1, $s1, 16<br></code>"
                },
                {
                    "title": "Question 4",
                    "question": "<p>Translate the following C code statements into as few lines of assembly as possible (assume d is $s3, e is $s4, and Z's base address is in $s7):</p><code>d = e + Z[8];</code>",
                    "answer": "<code>lw $t0, 32($s7)<br>add $s3, $s4, $t0<br></code>"
                },
                {
                    "title": "Question 5",
                    "question": "<p>What MIPS instructions correspond with this C arithmetic:</p><code>a = (17 * b) + (c / 2)</code",
                    "answer": "<code>sll $t0, $s1, 4 <br>add $t0, $t0, $s1 <br>srl $s2, $s2, 1 <br>add $s0, $s1, $s2 <br></code>"
                },
                {
                    "title": "Question 6",
                    "question": "Isolate bits 22 through 24 (inclusive) using only SLL and SRL.",
                    "answer": "<code>srl $t0, $t0, 22    <br>sll $t0, $t0, 29    <br>srl $t0, $t0, 7    <br></code>"
                },
                {
                    "title": "Question 7",
                    "question": "Access array position A[13] (assuming base address is in s0).",
                    "answer": "<code>lw $t0, 52($s0)</code>"
                },
                {
                    "title": "Question 8",
                    "question": "<p>For what range of values is the following MIPS arithmetic valid (i.e. no overflow, underflow, etc.), assuming that we are working with a signed number.</p><code>sll $s0, $s0, 16</code>",
                    "answer": "We must have any value which cannot overflow into the most significant bit (which would flip the sign of the number). Therefore, any number which is 32767 (0111 1111 1111 1111) or less will not overflow."
                }
            ],
            "topics": [
                "MIPS Memory Access",
                "MIPS Bitwise Instructions"
            ],
            "timeframe": "1/26 - 2/2"
        },
        {
            "title": "Week 4 Practice Problems",
            "questions": [
                {
                    "title": "Question 1",
                    "question": "Can unconditional branches compare numbers before branching?",
                    "answer": "No. Unconditional branches branch to a different section of the program no matter what, and they do not have register operands."
                },
                {
                    "title": "Question 2",
                    "question": "Can conditional branches branch if x < y?",
                    "answer": "No. Conditional branches evaluate either == or !=."
                },
                {
                    "title": "Question 3",
                    "question": "True or false: conditional branches take two register operands and a label to branch to.",
                    "answer": "This is true."
                },
                {
                    "title": "Question 4",
                    "question": "<p> What are the MIPS instructions which correspond with this C statement? Assume that $s0 = a, $s1 = b, and $s2 = c. </p> <code>if (a != b) { <br>c = 24;<br>} </code>",
                    "answer": "<p> Here is a possible approach: </p> <code>beq $s0, $s1, Branch <br>addi $s2, $zero, 24 <br>Branch:  </code> <p>And the reason it is a beq and not bne is that this is the only particular case where the c = 24 will not be evaluated. </p>"
                },
                {
                    "title": "Question 5",
                    "question": "<p> What is the issue with the below MIPS code? </p><code>addi $s0, $zero, 0 <br> Loop: <br> addi $s0, $s0, 1 <br> beq $s0, $zero, Exit <br>j Loop <br>Exit:  </code>",
                    "answer": "The problem is that this code will never actually exit the Loop (that is until $s0 eventually overflows, but that is not the desired behavior)."
                },
                {
                    "title": "Question 6",
                    "question": "Transfer the MIPS code from the previous statement into C code.",
                    "answer": "<p>This type of loop could almost be compared to a failed do while loop.</p> <code>int a = 0; <br>do { <br>a++;<br>} while (a != 0);  </code><p>Since the a++ occurs before the comparison, it will continue running infinitely (until overflow, etc.). Sometimes trying to translate a MIPS statement into C will help illuminate errors you can not immediately see.</p>                    "
                },
                {
                    "title": "Question 7",
                    "question": "<p>What is the problem with the below MIPS loop?</p> <code>addi $s1, $zero, 20 <br> Loop: <br>beq $s0, $s1, Exit <br>addi $s1, $s1, 1 <br>Exit:   </code>",
                    "answer": "There is no unconditional branch which actually forms the loop, so the code exits after one run-through."
                },
                {
                    "title": "Question 8",
                    "question": "<p>Translate the following C loop into MIPS. Assume that $s0 = a, $s1 = b, and $s2 = c.</p><code>for (int a = 0; a != c; a++) { <br> b = c; <br> }</code>",
                    "answer": "<p>Here is one possible way:</p><code>add $s0, $zero, $zero <br> Loop: <br> beq $s0, $s2, Exit <br> add $s1, $s2, $zero <br> addi $s0, $s0, 1 <br> j Loop <br> Exit: </code>"
                },
                {
                    "title": "Question 9",
                    "question": "<p> What is the issue with the below MIPS statement? </p> <code># Evaluate if a == c <br> beq #s0, #s2, Equal <br> <br> # Do not equal stuff here <br> addi $s0, $s0, 12 <br> <br> # Do some cool stuff if equal <br>Equal: <br> subi $s0, $s2, 1 <br>sll $s0, $s0, 1  </code>",
                    "answer": "The equal portion of the code will be executed no matter what because that block of code will eventually execute. We would fix this by adding an unconditional branch to go past the equal code if a and c are not equal."
                }
            ],
            "topics": [
                "Branching",
                "Beq & Bne",
                "Loops"
            ],
            "timeframe": "2/2 - 2/9"
        },
        {
            "title": "Quiz 5 Practice Problems",
            "questions": [
                {
                    "title": "Question 1",
                    "question": "What is unique about the jal function (i.e. what makes it different from the jump instruction)?",
                    "answer": "The jal function sets the $ra and jumps to the procedure, while j (jump) will just unconditional branch and do nothing else."
                },
                {
                    "title": "Question 2",
                    "question": "What does the jal function set the $ra register to?",
                    "answer": "It sets the $ra to the instruction (word) following the function call (PC+4)."
                },
                {
                    "title": "Question 3",
                    "question": "Why are some registers assumed to be preserved across function calls?",
                    "answer": "This is particularly important because it can help prevent fatal register overwrites. For example, if the main program is using register $s0 to hold an important user stored value, and function A overwrites it, then that will be lost when control is returned to main."
                },
                {
                    "title": "Question 4",
                    "question": "If you need to “spill” registers in a function in order to leverage additional registers, which ones would you be spilling?",
                    "answer": "The $s0-$s7 registers would be spilled to the stack as needed."
                },
                {
                    "title": "Question 5",
                    "question": "What does this spill look like (in MIPS)?",
                    "answer": "<p>Here is an example of “spilling” $s0.</p><code>addi $sp, $sp, -4<br>sw $s0, 0($sp)<br># Manipulating s0 here...<br>lw $s0, 0($sp) # Restore s0.<br>addi $sp, $sp, 4 # Make sure to readjust $sp in the end.</code>"
                },
                {
                    "title": "Question 6",
                    "question": "Which registers are not preserved across function calls?",
                    "answer": "$t0-$t9, $v0-$v1, $a0-$a3, and the $ra may have to be saved in the case of a nested function (it is a bit of a special case)."
                },
                {
                    "title": "Question 7",
                    "question": "Which way does the stack grow?",
                    "answer": "The stack is said to grow downward, but what this means is that its indexing starts high and is slowly decremented as more items are inserted. Remember that the stack is a LIFO structure as we learned in data structures, so functions should not be messing with the stack anywhere above the stack pointer."
                },
                {
                    "title": "Question 8",
                    "question": "Why shouldn’t procedures have the ability to change the stack above the current stack pointer?",
                    "answer": "This would be a mistake because that memory was not stored by the procedure (callee), but rather by some higher level caller which will likely need the memory it has saved to the stack."
                },
                {
                    "title": "Question 9",
                    "question": "Why is it so important to “release” memory from the stack once you are finished with it?",
                    "answer": "Take the example where a silly procedure decides to allocate memory to the stack and alter the stack pointer but not change the stack pointer back after it is done. The caller program then retrieves the two elements it saved to the stack before it called the procedure. It got the wrong items back!!"
                },
                {
                    "title": "Question 10",
                    "question": "When memory is “released” from the stack, do those memory locations get set back to the value of 0?",
                    "answer": "No, they do not. They will stay whatever values they were, and this means we must be especially careful! The same goes for registers — they will never get set back to zero unless you specify them to do so."
                },
                {
                    "title": "Question 11",
                    "question": "Give an example of an arbitrary function call whose function uses both the $t0 and $s0 registers. You can assume that both the $t0 and $s0 registers are important to the main function.",
                    "answer": "<code>addi $sp, $sp, -4<br>sw $t0, 0($sp)<br>jal function<br>lw $t0, 0($sp)<br>addi $sp, $sp, 4<br># End the program.<br>function:<br>&emsp;addi $sp, $sp, -4<br>&emsp;sw $s0, 0($sp)<br>&emsp;addi $s0, $zero, 20<br>&emsp;# more arbitrary stuff...<br>&emsp;lw $s0, 0($sp)<br>&emsp;addi $sp, $sp, 4<br>&emsp;jr $ra<br></code>"
                },
                {
                    "title": "Question 12",
                    "question": "<p>What is wrong with the below function call?</p><code>addi $s0, $s0, 5 # Some really important s0 stuff.<br>jal function<br>function:<br>&emsp;addi $sp, $sp, -4<br>&emsp;sw $t0, 0($sp)<br>&emsp;andi $s0, $s0, 0<br>&emsp;jr $ra<br></code>",
                    "answer": "There are multiple problems here! For one, the $sp is never readjusted at the end of the function. Additionally, function saved $t0, which it didn’t need to, and it should have saved $s0 instead since it changed $s0 (and the main program didn’t expect that!). One other thing to always look out for is that after jal function, the program runs into function again, and since $ra hasn’t changed, this function may loop forever."
                }
            ],
            "topics": [
                "MIPS Procedure Calls and Conventions"
            ],
            "timeframe": "2/11-2/18"
        },
        {
            "title": "Quiz 6 Practice Problems",
            "questions": [
                {
                    "title": "Question 1",
                    "question": "Please describe what bits 16 through 20 of an I type instruction are used for.",
                    "answer": "Bits 16 through 20 represent the rt field of the instruction. More specifically, the rt field is the destination register in many I type instructions, but may also be used for comparison in the case of a BNE or BEQ instruction. In general, please be able to describe what each of the fields of I, R, and J type instructions are for. Remember that the ISA designers have included everything for a reason!"
                },
                {
                    "title": "Question 2",
                    "question": "What is the purpose of the address field of j type instructions? Alsom, how many bits is it?",
                    "answer": "The address field in a j type instruction is bits 0 through 25, representing 26 total bits. This field is used in calculating the new PC using pseudo-direct addressing after the execution of the jump command."
                },
                {
                    "title": "Question 3",
                    "question": "How is the new PC calculated when executing a branch during a BEQ or BNE instruction?",
                    "answer": "When it is time to branch according to one of these two instructions, PC-relative addressing comes into play. This PC relative addressing calculates the new PC as the sum of the current PC (plus four) and a constant provided in the immediate field. While we use a label in this field, the assembler actually converts the label into a 16-bit hex number before executing the program."
                },
                {
                    "title": "Question 4",
                    "question": "Explain the difference between pseudo-direct addressing and base addressing.",
                    "answer": "Pseudo-direct addressing is used in the case of a j type instruction and works with a 26-bit jump field, while base addressing (usually a PC-relative addressing in the case of BNE and BEQ) works with a 16-bit immediate number."
                },
                {
                    "title": "Question 5",
                    "question": "Is jr a j-type instruction? Explain why it is (or isn’t).",
                    "answer": " Jr is not a j-type instruction, and it is not an i-type either. It can simply be an R-type instruction since it needs just one operand — the register which holds the jump address (typically the $ra)."
                },
                {
                    "title": "Question 6",
                    "question": "Are the rs, rt, and rd fields always used in an R-type instruction?",
                    "answer": "Nope! Though they are often all used, there are some instructions which only use one of the three (jr) and some which only use two (sll, srl)."
                },
                {
                    "title": "Question 7",
                    "question": "Why don’t we see immediate addressing in MIPS?",
                    "answer": "We are able to significantly extend our branching range through the use of base/PC-relative addressing as compared to only using the immediate."
                },
                {
                    "title": "Question 8",
                    "question": "Explain sign extension vs zero extension for immediates.",
                    "answer": "Sign extension will take the MSB of the provided 16-bit number and use it to pad the upper 16-bits of a new 32-bit number. Zero extension will glue 16 0’s as the upper 16-bits of a new 32-bit number. So the sign extended 16-bit number 0xFFFF would end up as 0xFFFFFFFF, whereas the zero extended 16-bit number would end up as 0x0000FFFF. You will see on the MIPS green card that there are some immediate instructions which use sign extension and some which use zero extension."
                }
            ],
            "topics": [
                "MIPS Instruction Formats"
            ],
            "timeframe": "2/18 - 2/26"
        },
        {
            "title": "Week 3 Practice Problems",
            "questions": [
                {
                    "title": "Question 1",
                    "question": "<p>Multiplication can be optimized in hardware by (choose all that apply):<br>(a) putting the multiplier in the unused part of the product register<br>(b) recognizing that only 32 bits of the product change with each step<br>(c) using subtraction to check if the result has overflow<br>(d) adding registers to hold overflow bits<br></p>",
                    "answer": "<p>(a) putting the multiplier in the unused part of the product register<br>(b) recognizing that only 32 bits of the product change with each step</p>"
                },
                {
                    "title": "Question 2",
                    "question": "<p>If we are sure that a MIPS multiplication result fits in 32 bits, which of these operations will perform the multiplication and put the result in $s0?<br></p><code>(a) mult $s0, $s1, $s2<br>(b) mult $s1, $s2<br>mfhi $s0<br>(c) mult $s1, $s2<br>mflo $s0<br>(d) mul $s1, $s2<br>mflo $s0<br></code>",
                    "answer": "<code>(c) mult $s1, $s2<br>mflo $s0</code>"
                },
                {
                    "title": "Question 3",
                    "question": "<p>Which of the following statements is true about version 3 of the division process?(a) Division can stop as soon as the subtraction results in a zero<br>(b) For a non-zero division, it is always necessary to have 32 iterations of the loop<br>(c) The quotient will be in the left half of the remainder register when division completes<br>(d) The remainder will be negative when the algorithm completes.<br></p>",
                    "answer": "(b) For a non-zero division, it is always necessary to have 32 iterations of the loop"
                },
                {
                    "title": "Question 4",
                    "question": "<p>Which field has to be shifted right one bit upon completion of the division? <br>(a) divisor<br>(b) right half of remainder register<br>(c) left half of remainder register<br>(d) entire remainder register<br></p>",
                    "answer": "(c) left half of remainder register"
                },
                {
                    "title": "Question 5",
                    "question": "<p>If I want to add two doubles located in ($f0,$f1) and ($f2,$f3), this instruction will work:</p><code>(a) add.d $f4, $f0, $f2 <br>(b) add.d $f5, $f1, $f3<br>(c) add.d $f5, $f0, $f2<br>(d) add $f4, $f0, $f2<br></code>",
                    "answer": "<code>(a) add.d $f4, $f0, $f2</code>"
                },
                {
                    "title": "Question 6",
                    "question": "<p>The following code has the result described below:</p><code>add.s $t0, $f1, $f2</code><p>(a) the two floats are added and the result is put into $t0<br>(b) it will not compile because regular registers can’t be used in float operations<br>(c) the two floats are converted to ints and added<br>(d) impossible to tell without knowing the values in the registers<br></p>",
                    "answer": "(b) it will not compile because regular registers can’t be used in float operations"
                },
            ],
            "topics": [
                "Computer Arithmetic"
            ],
            "timeframe": "3/07-3/15"
        },
    ]
}
